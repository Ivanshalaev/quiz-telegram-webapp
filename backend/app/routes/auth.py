from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from backend.app.database import get_session
from backend.app.models.user import User
from backend.app.schemas.user import UserCreate, UserVerify
from backend.app.services.mail import send_confirmation_email
import random

router = APIRouter(prefix="/auth", tags=["Auth"])

# üì¨ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
@router.post("/register")
async def register_user(user: UserCreate, db: AsyncSession = Depends(get_session)):
    code = str(random.randint(100000, 999999))

    result = await db.execute(select(User).where(User.email == user.email))
    existing_user = result.scalar_one_or_none()

    if existing_user:
        existing_user.code = code
    else:
        existing_user = User(email=user.email, code=code)
        db.add(existing_user)

    await db.commit()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    await send_confirmation_email(user.email, code)

    return {"message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", "code": code}

# ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞
@router.post("/verify")
async def verify_code(data: UserVerify, db: AsyncSession = Depends(get_session)):
    result = await db.execute(select(User).where(User.email == data.email))
    user = result.scalar_one_or_none()

    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if user.code != data.code:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

    user.code = None  # –û—á–∏—â–∞–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await db.commit()

    return {"message": "–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"}
